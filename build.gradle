buildscript {
    ext.kotlin_version = "$kotlin_version"
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
        // Make sure this version matches the one included in Kotlin for Forge
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10'
        // OPTIONAL Gradle plugin for Kotlin Serialization
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.6.10'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

apply plugin: "java"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.parchmentmc.librarian.forgegradle"
apply plugin: "kotlin"
apply plugin: 'kotlinx-serialization'
apply from: 'https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.1.0.gradle'
apply plugin: "maven-publish"
apply plugin: 'org.spongepowered.mixin'

version = '0.0.1'
group = 'com.cablemc.pokemoncobbled'
archivesBaseName = 'PokemonCobbled'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2022.01.23-1.18.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                pokemoncobbled {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                pokemoncobbled {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'pokemoncobbled', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                pokemoncobbled {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    // Create the library configuration, where our non-mod libraries will be added to
    library
    // Any dependency in the library configuration will also be added to the implementation configuration
    implementation.extendsFrom library
}

// Configure all runs with the following
minecraft.runs.all {
    // Set the minecraft_classpath token to the paths of all jars in the library configuration
    // This is added with the actual Minecraft classpath to get the real classpath information later on
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

mixin {
    // Refmaps for each SourceSet
    add sourceSets.main, 'mixins.pokemoncobbled.refmap.json'

    // Configs to add to runs and jars
    config 'mixins.pokemoncobbled.json'

    // Specify options for dev run configs
    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true

    // Options for the Annotation Processor
    quiet
}

repositories {
    mavenCentral()
    maven { url "https://repo.codemc.org/repository/maven-public" }
    maven { url "https://repo.aikar.co/content/groups/aikar/" }
    maven { url "https://jitpack.io/" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.59'
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    // For Showdown
    shadow 'com.caoccao.javet:javet:1.0.6' // Linux or Windows
    shadow 'com.caoccao.javet:javet-macos:1.0.6' // Mac OS (x86_64 Only)
    shadow group: 'commons-io', name: 'commons-io', version: '2.6'

    // For Showdown
    library 'com.caoccao.javet:javet:1.0.6' // Linux or Windows
    library 'com.caoccao.javet:javet-macos:1.0.6' // Mac OS (x86_64 Only)
    library group: 'commons-io', name: 'commons-io', version: '2.6'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'io.mockk:mockk:1.12.1'
}


// Testing -------------
test {
    useJUnitPlatform()
}
// ---------------------

jar {
    manifest {
        attributes([
                "Specification-Title"     : "pokemoncobbled",
                "Specification-Vendor"    : "Cable MC",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Cable MC",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions.freeCompilerArgs = ["-Xjvm-default=all"]
}

/*compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}*/

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfShadowJar')

shadowJar {
    classifier = null
    configurations = [project.configurations.shadow]
    //minimize()
    exclude "**/module-info.class"
    exclude "**/NOTICE"
//    exclude '**/*.kotlin_metadata'
//    exclude '**/*.kotlin_module'
//    exclude '**/*.kotlin_builtins'
    // relocate('kotlin', 'shaded.kotlin4')
}

reobf {
    shadowJar {}
}
// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
