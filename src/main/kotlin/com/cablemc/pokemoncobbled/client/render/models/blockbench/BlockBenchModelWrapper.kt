package com.cablemc.pokemoncobbled.client.render.models.blockbench

import net.minecraft.client.model.EntityModel
import net.minecraft.client.model.geom.ModelLayerLocation
import net.minecraft.client.model.geom.ModelPart
import net.minecraft.client.model.geom.builders.LayerDefinition
import net.minecraft.client.renderer.entity.EntityRendererProvider
import net.minecraft.world.entity.Entity
import net.minecraftforge.client.ForgeHooksClient

/**
 * Wraps around a model generated by BlockBench for easy registration in repositories.
 */
class BlockBenchModelWrapper<T : Entity>(
    val layerLocation: ModelLayerLocation,
    val layerDefinitionSupplier: () -> LayerDefinition,
    val modelFactory: (ModelPart) -> EntityModel<T>
) {

    lateinit var entityModel: EntityModel<T>
    private var isModelInitialized = false
    private var isLayerInitialized = false

    fun initializeModel(context: EntityRendererProvider.Context) {
        if (!isModelInitialized) {
            entityModel = modelFactory(context.bakeLayer(layerLocation)).also {
                if (it is PoseableEntityModel<T>) {
                    it.registerPoses()
                }
            }
            isModelInitialized = true
        }
    }

    fun initializeModelLayers() {
        if (!isLayerInitialized) {
            ForgeHooksClient.registerLayerDefinition(layerLocation, layerDefinitionSupplier)
            isLayerInitialized = true
        }
    }
}